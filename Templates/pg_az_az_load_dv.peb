# ======================================================================================================{% br %}
# DBMS Name        :    {{table.dbType.name}}{% br %}
# Template         :    {{settings.template.name}}{% br %}
# Description      :    Load data from Azure db to Azure db target using external files - pg repo
# Generated by     :    {{env.productVersion}}{% br %}
# Generated for    :    {{env.licensedTo}}{% br %}
# Generated on     :    {{env.currentTimestamp}}{% br %}
# Author           :    Krish , July 2017
# ======================================================================================================{% br %}
#  Create the extenral connection manually - used to create it here but not efficient to create and delete
#  every time
#
#     CREATE EXTERNAL DATA SOURCE <name>
#     WITH
#     (
#         TYPE=RDBMS,
#         LOCATION= <server_name>
#         DATABASE_NAME=<db name>
#         CREDENTIAL= <credential created by create crdential>
#     );
#
#     Set Extended Parameter ExternalSource, tempschema, SqlSrcDatabase in the source connection
#
#
# ======================================================================================================{% br %}


function runSQL_ODBC( $stmt, $conn)
{
#returns returncode and data

   $res=0
   $cmd = New-Object system.Data.Odbc.OdbcCommand($stmt,$conn)
   $da = New-Object system.Data.Odbc.OdbcDataAdapter($cmd)
   $dt = New-Object system.Data.datatable
   try {
       $res = $da.fill($dt)
      }
   catch {
      throw "Error: $($_.Exception.Message). `nStack trace:`n$($_.ScriptStackTrace), `nsqlQuery:"+$stmt
      }
   return $res,  $dt
}



function LogData( $op, $retcode, $connection, $ls)
{

  $msg = $op
  if ($retcode -eq 0)
  {
     $msg = $msg +" successful - ret code  " +[string] $retcode ;
     $flag="I"
  } else {
     $msg = $msg + " failed - ret code " + [string] $retcode
     $flag="E"
  }

  $ls.writeline($msg)
}

function strip_64tag($dsnName)
{
  if ( $dsnName.length -gt 0 -and $dsnName.substring(0,4) -eq '[64]') { $dsnName = $dsnName.replace('[64]','')}
  return $dsnName
}

$p_sequence = ${env:WSL_SEQUENCE}
$p_job_name = ${env:WSL_JOB_NAME}
$p_task_name = ${env:WSL_TASK_NAME}
$p_job_id = ${env:WSL_JOB_KEY}
$p_task_id =${env:WSL_TASK_KEY}
$p_return_msg = "Job completed"
$p_status =1

{%- fetch table -%}
{%- fetch metadataconnection -%}
{%- fetch table.target -%}
{%- fetch table.loadInfo.sourceConnection -%}
{% br %}

#IF ($env:WSL_WORKDIR.length -eq 0) { $env:WSL_WORKDIR = "C:\temp"}
 $env:WSL_WORKDIR = $env:Temp

$FILECTL=$env:WSL_WORKDIR+"\{{ table.name }}"+".ctl"
$FILELOG=$env:WSL_WORKDIR+"\{{ table.name }}"+".log"
$FILEAUD=$env:WSL_WORKDIR+"\{{ table.name }}"+".aud"
$FILESQL=$env:WSL_WORKDIR+"\{{ table.name }}"+".sql"


$ExtDataSource='{{table.loadInfo.sourceConnection.extendedPropertyValuesByName.ExternalSource}}' {% br %}
$extTableSchema="{{table.target.connection.extendedPropertyValuesByName.tempschema}}.ext_{{table.name}}"

if (${env:WSL_JOB_KEY} -eq 0 )
{
   [switch]$interactive = $true;
}
else
{
   [switch]$interactive = $false;
}


# Start of the script

$env:WSL_META_DSN = strip_64tag(${env:WSL_META_DSN})
$env:WSL_TGT_DSN =  strip_64tag(${env:WSL_TGT_DSN})
$env:WSL_SRC_DSN =  strip_64tag(${env:WSL_SRC_DSN})
$env:RED_META_DSN =  strip_64tag(${env:RED_META_DSN})


get-childitem env: | out-file -FilePath c:\temp\test.txt

{% br %}

$stmt_setsource =  @"
CREATE EXTERNAL DATA SOURCE $ExtDataSource
WITH {% br %}
(
    TYPE=RDBMS,
    LOCATION= '{{table.loadInfo.sourceConnection.extendedPropertyValuesByName.serverName}}', {% br %}
    DATABASE_NAME='$env:WSL_SRC_DB',
    CREDENTIAL= {{table.loadInfo.sourceConnection.extendedPropertyValuesByName.AZURECredential}} {% br %}
);
"@

$stmt_create_ext_table = @"
create external table $extTableSchema {% br %}
(
   {%- for column in table.columns -%}
      {%- set sTargetColumn = column.name -%}
      {%- set sTargetType = column.fullDatatype -%}
      {%- if loop.first %}
         {{sTargetColumn }} {{ sTargetType }}    {% br %}
      {%- else %}
         ,{{sTargetColumn }} {{ sTargetType }}   {% br %}
      {%- endif -%}
   {%- endfor -%})
with
(
   data_source = $ExtDataSource,
   schema_name ='{{table.loadInfo.sourceSchema}}', {% br %}
   object_name = '{{table.loadInfo.sourceTables}}' {% br %}
)
"@

$stmt_load = @"
INSERT INTO {{table.schema }}.{{ table.name }} {% br %}
{%- if table.loadinfo.overrideLoadSQL.length == 0 -%}
   ( {% br %}
      {%- for column in table.columns -%}
       {%- if column.name.indexOf('dss_') == -1 -%}
         {%- if not loop.first %}
            ,{{column.name}}  {%- br %}
         {%- else %}
             {{column.name}}  {%- br %}
         {%- endif -%}
       {%- endif -%}
      {%- endfor -%}
   )
    SELECT {%- br -%}
   {%- for column in table.columns -%}
      {%- fetch column.sourceColumn -%}
      {%- if column.name.indexOf('dss_') == -1 -%}
         {%- if not loop.first %}
            ,{{column.sourceColumn.name}}  {%- br %}
         {%- else %}
             {{column.sourceColumn.name}}  {%- br %}
         {%- endif -%}
      {%- endif -%}
   {%- endfor -%}
    From {% br %}
    {{table.target.connection.extendedPropertyValuesByName.tempschema}}.ext_{{table.name}} {% br %}
    {{table.loadinfo.whereAndGroupByClauses }}
{% else %}
   echo {{ table.loadinfo.overrideLoadSQL }}
{%- endif -%} {% br %}
"@

$stmt_drop_ext_table_iff = "IF OBJECT_ID( '" + $extTableSchema + "') IS NOT NULL DROP external table " + $extTableSchema
$stmt_drop_table = 'drop external table ' + $extTableSchema
$stmt_drop_source = 'drop external data source ' +  $ExtDataSource

#Assingments are done, start execute flow

try
{
[String] $connectstring = "DSN=" + $env:WSL_TGT_DSN + ";UID=" +$env:WSL_TGT_USER + ";Pwd=" + $env:WSL_TGT_PWD
$conn = New-Object System.Data.Odbc.OdbcConnection($connectstring)
$conn.open()

$logStream = New-Object IO.StreamWriter($FileAud,$false)
$logStream.AutoFlush = $true

[String] $metaConnectString= "DSN=" + $env:WSL_META_DSN + ";UID=" +$env:WSL_META_USER + ";Pwd=" + $env:WSL_META_PWD
$metaconn = New-Object System.Data.Odbc.OdbcConnection($metaConnectstring)
$metaConn.open()


# Don't have to create extarnal source when if it is there
#    $ODBCRet = runSQL_ODBC $stmt_setsource $conn
#    out-file -FilePath $FILEAUD -Encoding string -inputobject ("Starting row count: " + $ODBCRet[0])

  $ODBCRet = runSQL_ODBC $stmt_drop_ext_table_iff $conn
  LogData $("Dropping  External table if existing "+$extTableSchema) $ODBCRet[0] $metaconn $logStream

  $ODBCRet = runSQL_ODBC $stmt_create_ext_table $conn
  LogData $("Creating External table "+$extTableSchema) $ODBCRet[0] $metaconn $logStream

  $ODBCRet = runSQL_ODBC $stmt_load $conn
  LogData  $("Data loading from "+ '{{table.loadInfo.sourceTables}}') $ODBCRet[0] $metaconn $logStream

  $ODBCRet = runSQL_ODBC $stmt_drop_table $conn {% br %}
  LogData  $("Drop External Table "+$extTableSchema) $ODBCRet[0] $metaconn $logStream

# Don't drop the source if not created
#    $ODBCRet = runSQL_ODBC $stmt_drop_source  $conn {% br %}

$conn.close()
$metaconn.close()
$logStream.Dispose()

write-host $p_status
write-host $p_return_msg + [string] $interactive
if ($interactive) { get-content $FILEAUD }

}
catch
{
   write-output -2
   write-output "EXCEPTION!!"
   write-output $_.Exception.message
   write-output -inputobject $FILEAUD
   $conn.close()
   if ($interactive)
   {
      start notepad  $MyInvocation.MyCommand.path
   }
   return
}
